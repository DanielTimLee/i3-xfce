#!/usr/bin/env python

##########################################################################
# i3-xfce
# Copyright (c) 2014, Alexandre ACEBEDO, All rights reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3.0 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library.
##########################################################################

import os
import sys
import shutil
import pwd
import argparse
import subprocess
import yaml
import uuid
from enum import *

class StringifiedEnum(Enum):  
  def __str__(self):
    return str(self.value)

class Action(StringifiedEnum):
  INSTALL = "install"
  UNINSTALL = "uninstall"

class CmdLine:
  @staticmethod
  def generateTempDir():
    tmpPath = os.path.join("/tmp",str(uuid.uuid1()));
    exists = True
    while exists:
      exists = os.path.exists(tmpPath)
    os.makedirs(tmpPath)
    return tmpPath
  
  @staticmethod
  def install(args):
    CmdLine.performAction(Action.INSTALL, args)
    
  @staticmethod
  def uninstall(action,args):
    CmdLine.performAction(Action.UNINSTALL, args)
  
  @staticmethod
  def performAction(action,args):
    #Get the real user behind the sudo
    username = os.getenv("SUDO_USER")
    if(username != None):
      verbosity = ""
      if args.verbose != None:
        verbose = "-vvv"
      tmpPath = CmdLine.generateTempDir()
      playbookPath = os.path.join(tmpPath,"i3-xfce.playbook")
      playbook = [{}]
      playbook[0]["hosts"] = "all"
      playbook[0]["roles"] = args.parts
      playbookFile = open(playbookPath,'w')
      playbookFile.write(yaml.dump(playbook,default_flow_style=False,explicit_start=True))
      playbookFile.close()
      rolesPath = os.path.join(os.path.dirname(os.path.realpath(__file__)),"roles")
      
      command = 'ansible-playbook -i "localhost," -e "remote_user={0} action={1}" -c local {2} {3}'.format(username,str(action), playbookPath,verbosity)
      try:
        p = subprocess.Popen(command, shell=True, stderr=subprocess.PIPE, cwd=os.path.dirname(os.path.realpath(__file__)), env=dict(os.environ, ANSIBLE_ROLES_PATH=rolesPath))
        p.communicate()
        if p.returncode != 0:
          raise Exception("Error when executing ansible")
      except Exception as e:
        shutil.rmtree(tmpPath)
        raise(e)
      shutil.rmtree(tmpPath)
    else:
      raise Exception("This program must be ran as root")
    
  @staticmethod
  def parseArgs(rawArgs):
    rolesPath = os.path.join(os.path.dirname(os.path.realpath(__file__)),"roles")
    dirs = os.listdir(rolesPath)
    # Create main parser
    parser = argparse.ArgumentParser(prog="i3-xfce", description='i3-xfce-installer.')
    rootSubparsers = parser.add_subparsers(dest="function")
     
    # Parser for list command
    installParser = rootSubparsers.add_parser('install', help='install files')
    installParser.add_argument('--parts','-p', help='Parts to install', nargs="+", metavar=dirs, type=str, choices=dirs, default=dirs)
    installParser.add_argument('--verbose',"-v", help='Verbose mode', action='store_true')
    
        # Parser for list command
    installParser = rootSubparsers.add_parser('uninstall', help='uninstall files')
    installParser.add_argument('--parts','-p', help='Parts to install', nargs="+", metavar=dirs, type=str, choices=dirs, default=dirs)
    installParser.add_argument('--verbose',"-v", help='Verbose mode', action='store_true')
    
    return parser.parse_args(rawArgs[1:])
        
if __name__ == "__main__":
  try:
    args = CmdLine.parseArgs(sys.argv)
    CmdLine.performAction(args.function, args)
    sys.exit()
  except Exception as e:
    sys.exit("An error occured: {0}".format(e))
